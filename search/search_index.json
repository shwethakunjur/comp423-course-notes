{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Shwetha's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Shwetha Kunjur</li> <li>Reviewer: Riya Chawan</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites:","text":"<p>Before starting, make sure you have:</p> <ul> <li>Docker installed.</li> <li>Visual Studio Code installed.</li> <li>The Dev Containers extension for VS Code installed.</li> </ul>"},{"location":"tutorials/rust-setup/#steps","title":"Steps:","text":"<p>Create a new directory and initialize git</p> <pre><code>mkdir rust-dev-container\ncd rust-dev-container\ngit init\n</code></pre> <p>Add a Dev Container</p> <ul> <li> <p>Add a directory called .devcontainer and add a configuration file within this directory called devcontainer.json that contains the following content: <pre><code>{\n    \"name\": \"Rust Development Environment\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"rust-lang.rust-analyzer\"\n            ]\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>\"name\" sets the name of the Dev Container.</p> </li> <li> <p>\"image\" defines the Docker image to be used for the Rust environment.</p> </li> <li> <p>\"customizations\" installs the Rust Analyzer extension for VS Code.</p> </li> </ul> <p>Note</p> <p>Make sure Docker is running before proceeding</p> <p>Start your environment</p> <ul> <li> <p>Open the command palette in VS Code. In the menu bar, select View &gt; Command Palette.</p> </li> <li> <p>Enter the following command &gt;Dev Containers: Open Dev Container. This will start building your dev container.</p> </li> </ul> <p>Once your Dev Container starts, check that rustc is installed</p> <ul> <li>Open the terminal.</li> <li>Run: <pre><code>rustc --version\n</code></pre> <p>This will output the current version of Rust installed.</p> </li> </ul> <p>Create a new Rust project using Cargo</p> <p>Note</p> <p>Cargo is the official Rust package manager and build tool.</p> <ul> <li> <p>Run the following command to create a new binary project: <pre><code>cargo new hellocomp423 --vcs none\n</code></pre></p> </li> <li> <p>cargo new: Initializes a new Rust project.</p> </li> <li>hellocomp423: This is the name of your project.</li> <li>--vcs none: This prevents Cargo from initializing a new Git repository automatically in the project.</li> </ul> <p>Add the following code for your Hello COMP423 program:</p> <pre><code>fn main ()\n{\n    println!(\"Hello COMP423\");\n}\n</code></pre> <p>Compile and Run your program</p> <p>Option 1: Use cargo build to Compile the Project</p> <ul> <li> <p>Run the following command to compile your project: <pre><code>cargo build\n</code></pre></p> <p>This will generate an executable in the target folder. </p> </li> <li> <p>Then you can run it by using: <pre><code>./target/debug/hellocomp423\n</code></pre></p> </li> <li> <p>The output should be: <pre><code>Hello COMP423\n</code></pre></p> </li> </ul> <p>Option 2: Use cargo run to both compile and run your project</p> <ul> <li> <p>Run the following command to compile and run your project in one step: <pre><code>cargo run\n</code></pre></p> <p>This will compile the project and then immediately run the executable.</p> </li> <li> <p>The output should be: <pre><code>Hello COMP423\n</code></pre></p> </li> </ul> <p>You now have a Rust development environment!</p>"}]}